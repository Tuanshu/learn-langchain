# docker build -t learn_langchain_test .
# 
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04 as builder

RUN apt-get update && \
    apt-get install --no-install-recommends -y git vim build-essential python3-dev python3-venv && \
    rm -rf /var/lib/apt/lists/*

# RUN git clone git+https://github.com/paolorechia/GPTQ-for-LLaMa@cadbacf0dcc18f7c56db54561ad53ba0f8db878c /build

WORKDIR /build

RUN python3 -m venv /build/venv

# ts: add to install manually downloaded packages
COPY ts_packages /app/packages
RUN ls -la /app/packages
#RUN . /build/venv/bin/activate && pip3 install /app/packages/*


# ts: follwoing is original lines (but i added --default-timeout=1200)
RUN . /build/venv/bin/activate && \
    pip3 install --upgrade pip setuptools && \
    pip3 install --find-links=/app/packages torch torchvision torchaudio
    # pip3 install -r requirements.txt

# https://developer.nvidia.com/cuda-gpus
# for a rtx 2060: ARG TORCH_CUDA_ARCH_LIST="7.5"
ARG TORCH_CUDA_ARCH_LIST="3.5;5.0;6.0;6.1;7.0;7.5;8.0;8.6+PTX"
# ts disabled
# RUN . /build/venv/bin/activate && \
#     python3 setup_cuda.py bdist_wheel -d .

FROM nvidia/cuda:11.8.0-runtime-ubuntu22.04

LABEL maintainer="Your Name <your.email@example.com>"
LABEL description="Docker image for GPTQ-for-LLaMa and Text Generation WebUI"


# ts disabled, not sure if g++ is neccesary (libportaudio2 is for audio, i dont need)
# RUN apt-get update && \
#     apt-get install --no-install-recommends -y libportaudio2 libasound-dev git python3 python3-pip make g++ && \
#     rm -rf /var/lib/apt/lists/*

# ts added
RUN apt-get update && \
    apt-get install --no-install-recommends -y git python3 python3-pip make g++ && \
    rm -rf /var/lib/apt/lists/*


RUN --mount=type=cache,target=/root/.cache/pip pip3 install virtualenv
RUN mkdir /app

WORKDIR /app



# ARG WEBUI_VERSION
# RUN test -n "${WEBUI_VERSION}" && git reset --hard ${WEBUI_VERSION} || echo "Using provided webui source"


# add by ts
COPY ts_packages /app/packages
RUN ls -la /app/packages


RUN virtualenv /app/venv
RUN . /app/venv/bin/activate && \
    pip3 install --upgrade pip setuptools && \
    pip3 install --find-links=/app/packages torch torchvision torchaudio

# ts disabled
# COPY --from=builder /build /app/repositories/GPTQ-for-LLaMa
# RUN . /app/venv/bin/activate && \
#     pip3 install /app/repositories/GPTQ-for-LLaMa/*.whl

# ts disabled
# COPY extensions/api/requirements.txt /app/extensions/api/requirements.txt
# COPY extensions/elevenlabs_tts/requirements.txt /app/extensions/elevenlabs_tts/requirements.txt
# COPY extensions/google_translate/requirements.txt /app/extensions/google_translate/requirements.txt
# COPY extensions/silero_tts/requirements.txt /app/extensions/silero_tts/requirements.txt
# COPY extensions/whisper_stt/requirements.txt /app/extensions/whisper_stt/requirements.txt
# RUN --mount=type=cache,target=/root/.cache/pip . /app/venv/bin/activate && cd extensions/api && pip3 install -r requirements.txt
# RUN --mount=type=cache,target=/root/.cache/pip . /app/venv/bin/activate && cd extensions/elevenlabs_tts && pip3 install -r requirements.txt
# RUN --mount=type=cache,target=/root/.cache/pip . /app/venv/bin/activate && cd extensions/google_translate && pip3 install -r requirements.txt
# RUN --mount=type=cache,target=/root/.cache/pip . /app/venv/bin/activate && cd extensions/silero_tts && pip3 install -r requirements.txt
# RUN --mount=type=cache,target=/root/.cache/pip . /app/venv/bin/activate && cd extensions/whisper_stt && pip3 install -r requirements.txt

COPY requirements.txt /app/requirements.txt
COPY requirements_gptq.txt /app/requirements_gptq.txt

RUN . /app/venv/bin/activate && \
    pip3 install -r requirements.txt && pip3 install -r requirements_gptq.txt

# ts disabled
# RUN cp /app/venv/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cuda118.so /app/venv/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so

COPY . /app/
ENV CLI_ARGS=""
# ts disabled
#CMD . /app/venv/bin/activate && python3 server.py ${CLI_ARGS}
CMD . /app/venv/bin/activate &&  uvicorn servers.vicuna_server:app
